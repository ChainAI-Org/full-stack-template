// Web Container Setup Script
// This script sets up environment variables needed for the application
// to run in web containers like StackBlitz and CodeSandbox

import { writeFileSync, existsSync, readFileSync } from 'fs';
import { join } from 'path';
import crypto from 'crypto';

// Generate a strong random string for secrets
const generateSecret = (length = 32) => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=';
  let result = '';
  // Use Node.js crypto module
  for (let i = 0; i < length; i++) {
    const randomByte = crypto.randomBytes(1)[0];
    result += chars.charAt(randomByte % chars.length);
  }
  return result;
};

// Set up .env file with authentication secrets
const setupEnv = () => {
  try {
    const envPath = join(process.cwd(), '.env');
    
    console.log('🔧 Setting up environment for web container...');
    
    // Generate secure secrets
    const jwtSecret = generateSecret();
    const cookieSecret = generateSecret();
    
    // Default environment content
    let envContent = '';
    
    // Read existing .env file if it exists
    if (existsSync(envPath)) {
      console.log('📄 Reading existing .env file...');
      envContent = readFileSync(envPath, 'utf8');
      
      // Split into lines for easier manipulation
      const lines = envContent.split('\n');
      let jwtSet = false;
      let cookieSet = false;
      
      // Process each line to find and replace JWT_SECRET and COOKIE_SECRET
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('JWT_SECRET=')) {
          // Replace line with the new JWT_SECRET
          lines[i] = `JWT_SECRET=${jwtSecret}`;
          jwtSet = true;
          console.log('✅ Updated JWT_SECRET with a secure value');
        }
        if (lines[i].startsWith('COOKIE_SECRET=')) {
          // Replace line with the new COOKIE_SECRET
          lines[i] = `COOKIE_SECRET=${cookieSecret}`;
          cookieSet = true;
          console.log('✅ Updated COOKIE_SECRET with a secure value');
        }
      }
      
      // Add secrets if they don't exist in the file
      if (!jwtSet) {
        lines.push('\n# Authentication secrets');
        lines.push(`JWT_SECRET=${jwtSecret}`);
        console.log('✅ Added JWT_SECRET to .env file');
      }
      if (!cookieSet) {
        if (!jwtSet) lines.push('# Authentication secrets');
        lines.push(`COOKIE_SECRET=${cookieSecret}`);
        console.log('✅ Added COOKIE_SECRET to .env file');
      }
      
      // Reassemble the .env content
      envContent = lines.join('\n');
    } else {
      console.log('📄 Creating new .env file with authentication secrets...');
      envContent = `# Generated by webcontainer-setup.js
# Database configuration
DATABASE_CLIENT=sqlite3

# Authentication secrets
JWT_SECRET=${jwtSecret}
COOKIE_SECRET=${cookieSecret}
`;
    }
  
    // Write the updated .env file
    writeFileSync(envPath, envContent);
    
    console.log('✅ Environment setup complete!');
    console.log('🔑 JWT_SECRET and COOKIE_SECRET have been generated');
    
    // Also set these in process.env for immediate use
    process.env.JWT_SECRET = jwtSecret;
    process.env.COOKIE_SECRET = cookieSecret;
    
    // Optional: Force log the values for debugging
    console.log(`JWT_SECRET set to: ${jwtSecret.substring(0, 3)}...${jwtSecret.substring(jwtSecret.length-3)}`);
    console.log(`COOKIE_SECRET set to: ${cookieSecret.substring(0, 3)}...${cookieSecret.substring(cookieSecret.length-3)}`);
    
  } catch (error) {
    console.error('❌ Error setting up environment variables:', error.message);
    process.exit(1); // Exit with error code
  }
};

// Run the setup
setupEnv();

// Export the setup function for use in other files
export default setupEnv;
