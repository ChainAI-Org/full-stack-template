import {
  useSnapshot
} from "./chunk-E7CSU737.js";
import {
  require_react
} from "./chunk-6P6Q65E3.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@fastify/react/client.js
var import_react = __toESM(require_react());
var RouteContext = (0, import_react.createContext)({});
var isServer = typeof window === "undefined" && typeof process === "object";
function useRouteContext() {
  const routeContext = (0, import_react.useContext)(RouteContext);
  if (routeContext.state) {
    routeContext.snapshot = isServer ? routeContext.state ?? {} : useSnapshot(routeContext.state ?? {});
  }
  return routeContext;
}
async function hydrateRoutes(fromInput) {
  let from = fromInput;
  if (Array.isArray(from)) {
    from = Object.fromEntries(
      from.map((route) => [route.path, route])
    );
  }
  return window.routes.map((route) => {
    route.loader = memoImport(from[route.id]);
    route.component = (0, import_react.lazy)(() => route.loader());
    return route;
  });
}
function memoImport(func) {
  const kFuncExecuted = Symbol("kFuncExecuted");
  const kFuncValue = Symbol("kFuncValue");
  func[kFuncExecuted] = false;
  return async () => {
    if (!func[kFuncExecuted]) {
      func[kFuncValue] = await func();
      func[kFuncExecuted] = true;
    }
    return func[kFuncValue];
  };
}
export {
  RouteContext,
  hydrateRoutes,
  isServer,
  useRouteContext
};
//# sourceMappingURL=@fastify_react_client.js.map
